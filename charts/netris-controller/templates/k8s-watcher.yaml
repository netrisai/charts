---
{{- $microservicename := "k8s-watcher" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-%s" (include "netris-controller.fullname" .) $microservicename }}
  labels:
    {{- include "netris-controller.labels" . | nindent 4 }}
    {{- printf "%s-%s" (include "netris-controller.selectorLabels" .) $microservicename | nindent 4 }}
spec:
  {{- if not (index .Values $microservicename).autoscaling.enabled }}
  replicas: {{ (index .Values $microservicename).replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- printf "%s-%s" (include "netris-controller.selectorLabels" .) $microservicename | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- printf "%s-%s" (include "netris-controller.selectorLabels" .) $microservicename | nindent 8 }}
    spec:
      {{- with (index .Values $microservicename).imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "netris-controller.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: init-wait-mariadb
        image: alpine:3.11
        command:
          - sh
          - -c
          - for i in $(seq 1 200); do nc -z -w3 {{ printf "%s-%s" (include "netris-controller.fullname" .) "mariadb" }} {{ .Values.mariadb.primary.service.port }} && exit 0 || sleep 3; done; exit 1
      - name: init-wait-app
        image: alpine:3.11
        command:
          - sh
          - -c
          - for i in $(seq 1 200); do nc -z -w3 {{ printf "%s-%s" (include "netris-controller.fullname" .) "app" }} {{ .Values.app.service.port }} && exit 0 || sleep 3; done; exit 1
      containers:
        - name: {{ printf "%s-%s" .Chart.Name $microservicename }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ (index .Values $microservicename).image.repository }}:{{ (index .Values $microservicename).image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ (index .Values $microservicename).image.pullPolicy }}
          command: ['/app/servicebin', '-c', '/app/config/k8s-watcher.conf']
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
      volumes:
        - name: config
          configMap:
            name: {{ printf "%s-%s-%s" (include "netris-controller.fullname" .) $microservicename "config" }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- if (index .Values $microservicename).autoscaling.enabled }}
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ printf "%s-%s" (include "netris-controller.fullname" .) $microservicename }}
  labels:
    {{- include "netris-controller.labels" . | nindent 4 }}
    {{- printf "%s-%s" (include "netris-controller.selectorLabels" .) $microservicename | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ printf "%s-%s" (include "netris-controller.fullname" .) $microservicename }}
  minReplicas: {{ (index .Values $microservicename).autoscaling.minReplicas }}
  maxReplicas: {{ (index .Values $microservicename).autoscaling.maxReplicas }}
  metrics:
    {{- if (index .Values $microservicename).autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: {{ (index .Values $microservicename).autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if (index .Values $microservicename).autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: {{ (index .Values $microservicename).autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-%s-%s" (include "netris-controller.fullname" .) $microservicename "config" }}
  labels:
    {{- include "netris-controller.labels" . | nindent 4 }}
    {{- printf "%s-%s" (include "netris-controller.selectorLabels" .) $microservicename | nindent 4 }}
data:
  k8s-watcher.conf: |-
    [logging]
    #possible values {info|debug}
    level=info

    [conductor]
    address=http://{{ printf "%s-%s" (include "netris-controller.fullname" .) "app" }}
    login=k8swatcher
    password={{ .Values.netris.authKey }}

    [intervals]
    #processing=(seconds).
    processing=5
    #k8sapitimeout=(seconds)
    k8sapitimeout=5

...
